	plugin/smooth_scroll.vim	/^map  :call SmoothScroll("u",1, 1)$/;"	m
	plugin/smooth_scroll.vim	/^map  :call SmoothScroll("d",2, 2)$/;"	m
	plugin/smooth_scroll.vim	/^map  :call SmoothScroll("d",1, 1)$/;"	m
	plugin/smooth_scroll.vim	/^map  :call SmoothScroll("u",2, 2)$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
,ca	plugin/NERD_commenter.vim	/^        nmap ,ca <plug>NERDCommenterAltDelims$/;"	m
/	plugin/SearchComplete.vim	/^noremap \/ :call SearchCompleteStart()<CR>\/$/;"	m
<F5>	plugin/checksyntax.vim	/^    inoremap <F5> <c-o>:CheckSyntax<cr>$/;"	m
<F5>	plugin/checksyntax.vim	/^    noremap <F5> :CheckSyntax<cr>$/;"	m
<S-Tab>	pydiction-1.2/python_pydiction.vim	/^inoremap <silent> <buffer> <S-Tab> $/;"	m
<SID>xx	plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<Tab>	pydiction-1.2/python_pydiction.vim	/^inoremap <silent> <buffer> <Tab> $/;"	m
<c-n>	plugin/supertab.vim	/^  inoremap <c-n> <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<c-p>	plugin/supertab.vim	/^  inoremap <c-p> <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<c-r><tab>	after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-x>	plugin/supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<plug>NERDCommenterAlignBoth	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
AddLeftDelim	plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddRightDelim	plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AltMultipart	plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
AppendCommentToLine	plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
BackwardsSnippet	plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BuildTabStops	autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CanCommentLine	plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CheckStyleJlint	plugin/checksyntax.vim	/^function! CheckStyleJlint() "{{{3$/;"	f
CheckSyntax	plugin/checksyntax.vim	/^augroup CheckSyntax$/;"	a
CheckSyntax	plugin/checksyntax.vim	/^command! -bang -nargs=? CheckSyntax call CheckSyntax(1, "<bang>", <f-args>)$/;"	c
CheckSyntax	plugin/checksyntax.vim	/^function! CheckSyntax(manually, ...)$/;"	f
CheckSyntaxFail	plugin/checksyntax.vim	/^    fun! CheckSyntaxFail(manually)$/;"	f
CheckSyntaxSucceed	plugin/checksyntax.vim	/^    func! CheckSyntaxSucceed(manually)$/;"	f
CheckSyntax_prepare_ruby	plugin/checksyntax.vim	/^    fun! CheckSyntax_prepare_ruby()$/;"	f
ChooseSnippet	plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
Chop_it	plugin/autoproto.vim	/^function! Chop_it (da_line)$/;"	f
Close	ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
Close_bracket	plugin/autoproto.vim	/^function! Close_bracket()$/;"	f
CommandLineCompletion	plugin/supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CommentBlock	plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
ContextCompletion	plugin/supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	plugin/supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	plugin/supertab.vim	/^function! s:ContextText()$/;"	f
ConvertLeadingSpacesToTabs	plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Count	autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CountNonESCedOccurances	plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateMaps	plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
Debug	plugin/autoproto.vim	/^function! Debug (...)$/;"	f
DefineSnips	plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
Display_tag	plugin/autoproto.vim	/^function! Display_tag (tag)$/;"	f
DoesBlockHaveDelim	plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
Esc	plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
ExtractSnips	plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
Filename	autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FindBoundingLinesOfSexyCom	plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindDelimiterIndex	plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
GetLeft	plugin/NERD_commenter.vim	/^function s:GetLeft(alt, space, esc)$/;"	f
GetRight	plugin/NERD_commenter.vim	/^function s:GetRight(alt, space, esc)$/;"	f
GetSexyComLeft	plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSnippet	plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetVar	plugin/checksyntax.vim	/^function! s:GetVar(var, ft, manually) "{{{3$/;"	f
HasCStyleComments	plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
IncludeMarks	plugin/showmarks.vim	/^fun! s:IncludeMarks()$/;"	f
Init	plugin/supertab.vim	/^function! s:Init()$/;"	f
InitBuffer	plugin/supertab.vim	/^function! s:InitBuffer()$/;"	f
InitVariable	plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
InvertComment	plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsCommented	plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInSexyComment	plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsNumEven	plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
KeyMap.All	plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
LastIndexOfDelim	plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
LeftMostIndx	plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
Make	plugin/checksyntax.vim	/^fun! s:Make()$/;"	f
MakeSnip	plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
ManualCompletionEnter	plugin/supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
MapDelimiters	plugin/NERD_commenter.vim	/^function s:MapDelimiters(left, right)$/;"	f
MapDelimitersWithAlternative	plugin/NERD_commenter.vim	/^function s:MapDelimitersWithAlternative(left, right, leftAlt, rightAlt)$/;"	f
Map_close_bracket	plugin/autoproto.vim	/^function! Map_close_bracket()$/;"	f
Map_comma	plugin/autoproto.vim	/^function! Map_comma (...)$/;"	f
Map_semi	plugin/autoproto.vim	/^function! Map_semi()$/;"	f
MenuController.New	plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Multipart	plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
NERDComment	plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NameOfMark	plugin/showmarks.vim	/^fun! s:NameOfMark(mark)$/;"	f
NerdEcho	plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NumLinesInBuf	plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
Open_bracket	plugin/autoproto.vim	/^function! Open_bracket (...)$/;"	f
PYDICTION_DICT	pydiction-1.2/pydiction.py	/^PYDICTION_DICT = r'complete-dict'$/;"	v
PYDICTION_DICT_BACKUP	pydiction-1.2/pydiction.py	/^PYDICTION_DICT_BACKUP = r'complete-dict.last'$/;"	v
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PlaceDelimitersAndInsBetween	plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
ProcessFile	plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
RemoveDelimiters	plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSnippet	autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ReplaceDelims	plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ResetSnippets	plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
RestoreScreenState	plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreVals	pydiction-1.2/python_pydiction.vim	/^    function! s:RestoreVals()$/;"	f
RightMostIndx	plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
Rm_leading_spaces	plugin/autoproto.vim	/^function! Rm_leading_spaces (string)$/;"	f
Rm_trailing_spaces	plugin/autoproto.vim	/^function Rm_trailing_spaces (string)$/;"	f
STDOUT_ONLY	pydiction-1.2/pydiction.py	/^        STDOUT_ONLY = True$/;"	v
STDOUT_ONLY	pydiction-1.2/pydiction.py	/^STDOUT_ONLY = False$/;"	v
SaveScreenState	plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SearchComplete	plugin/SearchComplete.vim	/^function! SearchComplete()$/;"	f
SearchCompleteStart	plugin/SearchComplete.vim	/^function! SearchCompleteStart()$/;"	f
SearchCompleteStop	plugin/SearchComplete.vim	/^function! SearchCompleteStop()$/;"	f
SelectWord	autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Semi_typed	plugin/autoproto.vim	/^function! Semi_typed()$/;"	f
SetCompletionType	plugin/supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetDefaultCompletionType	plugin/supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetUpForNewFiletype	plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
SetVals	pydiction-1.2/python_pydiction.vim	/^    function! s:SetVals()$/;"	f
ShowAvailableSnips	plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowMarks	plugin/showmarks.vim	/^	aug ShowMarks$/;"	a
ShowMarks	plugin/showmarks.vim	/^fun! s:ShowMarks()$/;"	f
ShowMarksClearAll	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksClearAll  :call <sid>ShowMarksClearAll()$/;"	c
ShowMarksClearAll	plugin/showmarks.vim	/^fun! s:ShowMarksClearAll()$/;"	f
ShowMarksClearMark	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksClearMark :call <sid>ShowMarksClearMark()$/;"	c
ShowMarksClearMark	plugin/showmarks.vim	/^fun! s:ShowMarksClearMark()$/;"	f
ShowMarksHideAll	plugin/showmarks.vim	/^fun! s:ShowMarksHideAll()$/;"	f
ShowMarksOn	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksOn        :call <sid>ShowMarksOn()$/;"	c
ShowMarksOn	plugin/showmarks.vim	/^fun! s:ShowMarksOn()$/;"	f
ShowMarksPlaceMark	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksPlaceMark :call <sid>ShowMarksPlaceMark()$/;"	c
ShowMarksPlaceMark	plugin/showmarks.vim	/^fun! s:ShowMarksPlaceMark()$/;"	f
ShowMarksSetup	plugin/showmarks.vim	/^fun! s:ShowMarksSetup()$/;"	f
ShowMarksToggle	plugin/showmarks.vim	/^com! -nargs=0 ShowMarksToggle    :call <sid>ShowMarksToggle()$/;"	c
ShowMarksToggle	plugin/showmarks.vim	/^fun! s:ShowMarksToggle()$/;"	f
SmoothScroll	plugin/smooth_scroll.vim	/^function! SmoothScroll(dir, windiv, factor)$/;"	f
SuperTab	plugin/supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	plugin/supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabSetCompletionType	plugin/supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
TabComplete	pydiction-1.2/python_pydiction.vim	/^    function! s:TabComplete(direction)$/;"	f
TabSpace	plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TagList_IsValid	plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tlist	plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UnEsc	plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
Unmap_close_bracket	plugin/autoproto.vim	/^function! Unmap_close_bracket()$/;"	f
Unmap_semi	plugin/autoproto.vim	/^function! Unmap_semi()$/;"	f
UntabbedCol	plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
UpdateChangedSnip	autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
VerifyText	plugin/showmarks.vim	/^fun! s:VerifyText(which)$/;"	f
WillComplete	plugin/supertab.vim	/^function! s:WillComplete()$/;"	f
\sm	plugin/showmarks.vim	/^noremap <unique> <script> \\sm m$/;"	m
__author__	pydiction-1.2/pydiction.py	/^__author__ = "Ryan Kulla (rkulla AT gmail DOT com)"$/;"	v
__copyright__	pydiction-1.2/pydiction.py	/^__copyright__ = "Copyright (c) 2003-2009 Ryan Kulla"$/;"	v
__version__	pydiction-1.2/pydiction.py	/^__version__ = "1.2"$/;"	v
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
answer	pydiction-1.2/pydiction.py	/^                                    PYDICTION_DICT_BACKUP)$/;"	v
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
commentEnablers	plugin/NERD_commenter.vim	/^augroup commentEnablers$/;"	a
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
escape	autoload/xolox/option.vim	/^function! s:escape(s)$/;"	f
escape_tags	autoload/xolox/option.vim	/^function! s:escape_tags(s)$/;"	f
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
f	pydiction-1.2/pydiction.py	/^            f = open(PYDICTION_DICT, 'r')$/;"	v
file_lines	pydiction-1.2/pydiction.py	/^            file_lines = f.readlines()$/;"	v
findAndRevealPath	plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
g:NERDTreeBookmark	plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:SuperTabCompletionContexts	plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabDefaultCompletionType	plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestHighlight	plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabMidWordCompletion	plugin/supertab.vim	/^    let g:SuperTabMidWordCompletion = 1$/;"	v
g:SuperTabRetainCompletionDuration	plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:checksyntax	plugin/checksyntax.vim	/^let g:checksyntax = 5$/;"	v
g:checksyntax_alt_java	plugin/checksyntax.vim	/^    let g:checksyntax_alt_java = 'javaCheckstyle'$/;"	v
g:checksyntax_alt_php	plugin/checksyntax.vim	/^    let g:checksyntax_alt_php = 'phpp'$/;"	v
g:checksyntax_auto	plugin/checksyntax.vim	/^    let g:checksyntax_auto = 1$/;"	v
g:checksyntax_auto_lua	plugin/checksyntax.vim	/^    let g:checksyntax_auto_lua = 1$/;"	v
g:checksyntax_auto_php	plugin/checksyntax.vim	/^    let g:checksyntax_auto_php = 1$/;"	v
g:checksyntax_auto_phpp	plugin/checksyntax.vim	/^    let g:checksyntax_auto_phpp = g:checksyntax_auto_php$/;"	v
g:checksyntax_auto_ruby	plugin/checksyntax.vim	/^    let g:checksyntax_auto_ruby = 0$/;"	v
g:checksyntax_auto_tex	plugin/checksyntax.vim	/^    let g:checksyntax_auto_tex = 0$/;"	v
g:checksyntax_auto_viki	plugin/checksyntax.vim	/^    let g:checksyntax_auto_viki = 0$/;"	v
g:checksyntax_cmd_java	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_java = '*CheckStyleJlint'$/;"	v
g:checksyntax_cmd_javascript	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_javascript = 'jsl -nofilelisting -nocontext -nosummary -nologo -process'$/;"	v
g:checksyntax_cmd_lua	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_lua = 'luac -p'$/;"	v
g:checksyntax_cmd_php	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_php  = 'php -l'$/;"	v
g:checksyntax_cmd_phpp	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_phpp = 'php -f'$/;"	v
g:checksyntax_cmd_ruby	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_ruby = 'ruby -c'$/;"	v
g:checksyntax_cmd_tex	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_tex = 'chktex -q -v0'$/;"	v
g:checksyntax_cmd_viki	plugin/checksyntax.vim	/^    let g:checksyntax_cmd_viki = 'deplate -f null'$/;"	v
g:checksyntax_compiler_c	plugin/checksyntax.vim	/^    let g:checksyntax_compiler_c = 'splint'$/;"	v
g:checksyntax_compiler_cpp	plugin/checksyntax.vim	/^    let g:checksyntax_compiler_cpp = 'splint'$/;"	v
g:checksyntax_compiler_docbk	plugin/checksyntax.vim	/^    let g:checksyntax_compiler_docbk = g:checksyntax_compiler_xml$/;"	v
g:checksyntax_compiler_html	plugin/checksyntax.vim	/^    let g:checksyntax_compiler_html = 'tidy'$/;"	v
g:checksyntax_compiler_javaCheckstyle	plugin/checksyntax.vim	/^    let g:checksyntax_compiler_javaCheckstyle = 'checkstyle'$/;"	v
g:checksyntax_compiler_xml	plugin/checksyntax.vim	/^    let g:checksyntax_compiler_xml = 'xmllint'$/;"	v
g:checksyntax_efm_lua	plugin/checksyntax.vim	/^    let g:checksyntax_efm_lua  = 'luac\\:\\ %f:%l:\\ %m'$/;"	v
g:checksyntax_efm_php	plugin/checksyntax.vim	/^    let g:checksyntax_efm_php  = '%*[^:]: %m in %f on line %l'$/;"	v
g:checksyntax_efm_phpp	plugin/checksyntax.vim	/^    let g:checksyntax_efm_phpp = g:checksyntax_efm_php$/;"	v
g:checksyntax_efm_tex	plugin/checksyntax.vim	/^    let g:checksyntax_efm_tex  = '%f:%l:%m'$/;"	v
g:checksyntax_failrx	plugin/checksyntax.vim	/^    let g:checksyntax_failrx = '\\ *\\(\\d \\f\\{-}:\\)\\?\\d\\{-}:'$/;"	v
g:checksyntax_okrx_javascript	plugin/checksyntax.vim	/^    let g:checksyntax_okrx_javascript = '0 error(s), 0 warning(s)'$/;"	v
g:checksyntax_okrx_php	plugin/checksyntax.vim	/^    let g:checksyntax_okrx_php = 'No syntax errors detected in '$/;"	v
g:checksyntax_okrx_phpp	plugin/checksyntax.vim	/^    let g:checksyntax_okrx_phpp = g:checksyntax_okrx_php$/;"	v
g:checksyntax_okrx_ruby	plugin/checksyntax.vim	/^    let g:checksyntax_okrx_ruby = 'Syntax OK\\|No Errors'$/;"	v
g:did_ft	plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:loaded_nerdtree_exec_menuitem	nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:scroll_factor	plugin/smooth_scroll.vim	/^let g:scroll_factor = 5000$/;"	v
g:timer_enabled	autoload/xolox/timer.vim	/^  let g:timer_enabled = 0$/;"	v
g:timer_verbosity	autoload/xolox/timer.vim	/^  let g:timer_verbosity = 1$/;"	v
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_submodules	pydiction-1.2/pydiction.py	/^def get_submodules(module_name, submodules):$/;"	f
get_yesno	pydiction-1.2/pydiction.py	/^def get_yesno(msg="[Y\/n]?"):$/;"	f
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
loaded_nerd_comments	plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_search_complete	plugin/SearchComplete.vim	/^let loaded_search_complete = 1$/;"	v
loaded_showmarks	plugin/showmarks.vim	/^let loaded_showmarks = 1$/;"	v
loaded_snips	plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
m	plugin/showmarks.vim	/^noremap <silent> m :exe 'norm \\sm'.nr2char(getchar())<bar>call <sid>ShowMarks()<CR>$/;"	m
main	pydiction-1.2/pydiction.py	/^def main(write_to):$/;"	f
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
message	autoload/xolox.vim	/^function! s:message(hlgroup, args) " -- implementation of message() and warning() {{{1$/;"	f
my_import	pydiction-1.2/pydiction.py	/^def my_import(name):$/;"	f
n	pydiction-1.2/pydiction.py	/^        write_to.write('\\n--- from %s import %s ---\\n' % $/;"	i
n	pydiction-1.2/pydiction.py	/^    write_to.write('\\n--- from %s import * ---\\n' % module_name)$/;"	i
n	pydiction-1.2/pydiction.py	/^    write_to.write('\\n--- import %s ---\\n' % module_name)$/;"	i
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
os	pydiction-1.2/pydiction.py	/^import os$/;"	i
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
promptToDelBuffer	nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
remove_duplicates	pydiction-1.2/pydiction.py	/^def remove_duplicates(seq, keep=()):$/;"	f
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
s	pydiction-1.2/pydiction.py	/^                    if line.find('--- import %s ' % module_name) != -1:$/;"	i
s	pydiction-1.2/pydiction.py	/^        write_to.write('\\n--- from %s import %s ---\\n' % $/;"	i
s	pydiction-1.2/pydiction.py	/^    write_to.write('\\n--- import %s ---\\n' % module_name)$/;"	i
s:Bookmark	plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:KeyMap	plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:MenuController	plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDFileNameEscape	plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:Path	plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Tlist_Skip_Refresh	plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:all_marks	plugin/showmarks.vim	/^let s:all_marks = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.'`^<>[]{}()\\""$/;"	v
s:cpo_save	plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:did_snip_helper	ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:lenSpaceStr	plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:menu_char_prefix	plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modes	plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:next_buffer_number	plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:old_cpo	plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:running_windows	plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:snippets	plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:spaceStr	plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:tabHelp	plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:tlist_app_name	plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:types	plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	plugin/supertab.vim	/^  let s:types =$/;"	v
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
showMenu	plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
shutil	pydiction-1.2/pydiction.py	/^import shutil$/;"	i
snipMate#expandSnip	autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
sys	pydiction-1.2/pydiction.py	/^import sys$/;"	i
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
types	pydiction-1.2/pydiction.py	/^import types$/;"	i
unescape	autoload/xolox/option.vim	/^function! s:unescape(s)$/;"	f
unescape_tags	autoload/xolox/option.vim	/^function! s:unescape_tags(s)$/;"	f
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
write_dictionary	pydiction-1.2/pydiction.py	/^def write_dictionary(module_name):$/;"	f
write_to	pydiction-1.2/pydiction.py	/^        write_to = open(PYDICTION_DICT, 'a')$/;"	v
write_to	pydiction-1.2/pydiction.py	/^        write_to = sys.stdout$/;"	v
xolox#escape#pattern	autoload/xolox/escape.vim	/^function! xolox#escape#pattern(string)$/;"	f
xolox#escape#substitute	autoload/xolox/escape.vim	/^function! xolox#escape#substitute(string)$/;"	f
xolox#message	autoload/xolox.vim	/^function! xolox#message(...) " -- show a formatted informational message to the user {{{1$/;"	f
xolox#option#join	autoload/xolox/option.vim	/^function! xolox#option#join(values) " {{{1$/;"	f
xolox#option#join_tags	autoload/xolox/option.vim	/^function! xolox#option#join_tags(values) " {{{1$/;"	f
xolox#option#split	autoload/xolox/option.vim	/^function! xolox#option#split(value) " {{{1$/;"	f
xolox#option#split_tags	autoload/xolox/option.vim	/^function! xolox#option#split_tags(value) " {{{1$/;"	f
xolox#timer#start	autoload/xolox/timer.vim	/^function! xolox#timer#start()$/;"	f
xolox#timer#stop	autoload/xolox/timer.vim	/^function! xolox#timer#stop(start, message)$/;"	f
xolox#trim	autoload/xolox.vim	/^function! xolox#trim(s) " -- trim whitespace from start\/end of string {{{1$/;"	f
xolox#unique	autoload/xolox.vim	/^function! xolox#unique(list) " -- remove duplicate values from list (in-place) {{{1$/;"	f
xolox#warning	autoload/xolox.vim	/^function! xolox#warning(...) " -- show a formatted warning message to the user {{{1$/;"	f
